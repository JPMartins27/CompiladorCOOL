LEIA este arquivo para a atribuição da programãção 2 (Java edition)
=======================================================
Seu diretódirio de possuir os seguintes arquivos:

 Makefile
 README
 cool.lex
 test.cl
 AbstractSymbol.java  -> [course dir]/src/PA2J/AbstractSymbol.java
 BoolConst.java       -> [course dir]/src/PA2J/BoolConst.java
 Flags.java           -> [course dir]/src/PA2J/Flags.java
 IdSymbol.java        -> [course dir]/src/PA2J/IdSymbol.java
 IdTable.java         -> [course dir]/src/PA2J/IdTable.java
 IntSymbol.java       -> [course dir]/src/PA2J/IntSymbol.java
 IntTable.java        -> [course dir]/src/PA2J/IntTable.java
 Lexer.java           -> [course dir]/src/PA2J/Lexer.java
 AbstractTable.java   -> [course dir]/src/PA2J/AbstractTable.java
 StringSymbol.java    -> [course dir]/src/PA2J/StringSymbol.java
 StringTable.java     -> [course dir]/src/PA2J/StringTable.java
 Utilities.java       -> [course dir]/src/PA2J/Utilities.java
 TokenConstants.java  -> [course dir]/src/PA2J/TokenConstants.java
 *.java		      outros arquivos gerados:

	O Makefile contem os destinos paracompilar e executar seu programa.
	EVITE MODIFICAR.

	cool.lex é um arquivo de esqueleto para a especificação do
	analisador léxico. Você deve completá-lo com o seu regular
	expressões, padrões e ações. 

	test.cl é um programa COOL que você pode testar o léxico
	analisador ligado. o test.cl não exerce todo o léxico
	construções de COOL e parte de sua tarefa é reescrever
	test.cl com um conjunto completo de testes para o seu analisador léxico.

	TokenConstants.java contém definições constantes usadas por
	quase todas as partes do compilador. EVITE MODIFICAR.

	* Table.java e * Symbol.java contêm dados da tabela de strings
	estruturas. EVITE MODIFICAR.

	Utilities.java contém várias funções de suporte usadas pelo
	driver lexer principal (Lexer.java). EVITE MODIFICAR.

	Lexer.java contém o método principal que irá chamar o seu léxico
	e imprima os tokens retornados. EVITE MODIFICAR.

        CoolLexer.java é o scanner gerado pelo jlex do cool.lex.
        NÃO MODIFIQUE-O, pois suas mudanças serão sobrescritas na próxima
        vez que você compile jlex.

	mycoolc é uma shell script que cola as fases do
	compilador usando Unix pipes em vez de vincular estaticamente o código.
	Embora ineficiente, essa arquitetura facilita a mistura e a correspondência
	os componentes que você escreve com os do compilador do curso.


Instruções
------------

	Para compilar seu programa do tipo lextest:

	% make lexer

	Execute seu lexer colocando sua entrada de teste em um arquivo 'foo.cl' e
	execute o programa lextest:

	% lexer foo.cl

	Para executar seu lexer no arquivo test.cl type:
	
	% make dotest

	Se você acha que seu analisador léxico está correto e se comporta como
o que nós escrevemos, você pode realmente tentar 'mycoolc' e ver se
Ele é executado e produz código correto para qualquer exemplo.
Se o seu analisador léxico se comportar de
maneira inesperada, você pode obter erros em qualquer lugar, ou seja, durante
parsing, durante a análise semântica, durante a geração de código ou
somente quando você executa o código produzido no spim. Então cuidado.


   
